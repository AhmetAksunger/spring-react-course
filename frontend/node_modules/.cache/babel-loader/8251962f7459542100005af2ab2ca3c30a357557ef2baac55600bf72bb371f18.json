{"ast":null,"code":"import{legacy_createStore as createStore}from'redux';import authReducer from'./authReducer';import SecureLS from'secure-ls';import{setAuthorizationHeader}from'../api/apiCalls';var secureLS=new SecureLS();var getStateFromStorage=function getStateFromStorage(){var localAuthData=secureLS.get(\"auth\");var stateInLocalStorage={isLoggedIn:false,username:undefined,displayName:undefined,image:undefined,password:undefined};if(localAuthData){return localAuthData;}};var updateStateInStorage=function updateStateInStorage(newState){secureLS.set(\"auth\",newState);};var configureStore=function configureStore(){var stateInLocalStorage=getStateFromStorage();var store=createStore(authReducer,stateInLocalStorage,window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__());// each time the state changes, this method will run\nstore.subscribe(function(){updateStateInStorage(store.getState());setAuthorizationHeader(store.getState());});return store;};export default configureStore;","map":{"version":3,"names":["legacy_createStore","createStore","authReducer","SecureLS","setAuthorizationHeader","secureLS","getStateFromStorage","localAuthData","get","stateInLocalStorage","isLoggedIn","username","undefined","displayName","image","password","updateStateInStorage","newState","set","configureStore","store","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState"],"sources":["C:/Users/90538/Desktop/spring-react-course/frontend/src/redux/configureStore.js"],"sourcesContent":["import { legacy_createStore as createStore } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport SecureLS from 'secure-ls';\r\nimport { setAuthorizationHeader } from '../api/apiCalls';\r\n\r\nconst secureLS = new SecureLS();\r\n\r\nconst getStateFromStorage = () => {\r\n\r\n  const localAuthData = secureLS.get(\"auth\");\r\n\r\n  let stateInLocalStorage = {\r\n    isLoggedIn: false,\r\n    username: undefined,\r\n    displayName: undefined,\r\n    image: undefined,\r\n    password: undefined\r\n  }\r\n\r\n  if(localAuthData){\r\n    return localAuthData;\r\n  }\r\n}\r\n\r\nconst updateStateInStorage = (newState) => {\r\n\r\n  secureLS.set(\"auth\",newState);\r\n\r\n}\r\n  \r\nconst configureStore = () => {\r\n\r\n  const stateInLocalStorage = getStateFromStorage();\r\n\r\n  const store = createStore(authReducer, stateInLocalStorage,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());  \r\n\r\n  // each time the state changes, this method will run\r\n  store.subscribe(() => {\r\n    updateStateInStorage(store.getState());\r\n    setAuthorizationHeader(store.getState());\r\n  })\r\n\r\n  return store; \r\n}\r\n\r\nexport default configureStore;"],"mappings":"AAAA,OAASA,kBAAkB,GAAI,CAAAC,WAAW,KAAQ,OAAO,CACzD,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAChC,OAASC,sBAAsB,KAAQ,iBAAiB,CAExD,GAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAF,QAAQ,CAAC,CAAC,CAE/B,GAAM,CAAAG,mBAAmB,CAAG,QAAtB,CAAAA,mBAAmBA,CAAA,CAAS,CAEhC,GAAM,CAAAC,aAAa,CAAGF,QAAQ,CAACG,GAAG,CAAC,MAAM,CAAC,CAE1C,GAAI,CAAAC,mBAAmB,CAAG,CACxBC,UAAU,CAAE,KAAK,CACjBC,QAAQ,CAAEC,SAAS,CACnBC,WAAW,CAAED,SAAS,CACtBE,KAAK,CAAEF,SAAS,CAChBG,QAAQ,CAAEH,SACZ,CAAC,CAED,GAAGL,aAAa,CAAC,CACf,MAAO,CAAAA,aAAa,CACtB,CACF,CAAC,CAED,GAAM,CAAAS,oBAAoB,CAAG,QAAvB,CAAAA,oBAAoBA,CAAIC,QAAQ,CAAK,CAEzCZ,QAAQ,CAACa,GAAG,CAAC,MAAM,CAACD,QAAQ,CAAC,CAE/B,CAAC,CAED,GAAM,CAAAE,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAA,CAAS,CAE3B,GAAM,CAAAV,mBAAmB,CAAGH,mBAAmB,CAAC,CAAC,CAEjD,GAAM,CAAAc,KAAK,CAAGnB,WAAW,CAACC,WAAW,CAAEO,mBAAmB,CAACY,MAAM,CAACC,4BAA4B,EAAID,MAAM,CAACC,4BAA4B,CAAC,CAAC,CAAC,CAExI;AACAF,KAAK,CAACG,SAAS,CAAC,UAAM,CACpBP,oBAAoB,CAACI,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CACtCpB,sBAAsB,CAACgB,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAC1C,CAAC,CAAC,CAEF,MAAO,CAAAJ,KAAK,CACd,CAAC,CAED,cAAe,CAAAD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}