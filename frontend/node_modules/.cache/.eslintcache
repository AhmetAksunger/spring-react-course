[{"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\index.js":"1","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserSignupPage.js":"3","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\api\\apiCalls.js":"4","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\input.js":"5","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\i18n.js":"6","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserLoginPage.js":"7","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\LanguageSelector.js":"8","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ButtonWithProgress.js":"9","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\shared\\ApiProgress.js":"10","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\container\\App.js":"11","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\HomePage.js":"12","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserPage.js":"13","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\TopBar.js":"14","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ProfileCard.js":"15","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\shared\\AuthenticationContext.js":"16","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\configureStore.js":"17","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\authReducer.js":"18","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\authActions.js":"19","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\Constants.js":"20","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\UserList.js":"21","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\UserListItem.js":"22","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ProfileImageWithDefault.js":"23","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\Spinner.js":"24","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\DropdownMenu.js":"25","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxifySection.js":"26","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxFeed.js":"27","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxListItem.js":"28","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxFeedForProfile.js":"29","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\AutoImageUpload.js":"30","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\Modal.js":"31"},{"size":838,"mtime":1683327782216,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":1682959451412,"results":"34","hashOfConfig":"33"},{"size":4489,"mtime":1685393224414,"results":"35","hashOfConfig":"33"},{"size":2388,"mtime":1685386018675,"results":"36","hashOfConfig":"33"},{"size":559,"mtime":1683826506563,"results":"37","hashOfConfig":"33"},{"size":4171,"mtime":1685055290089,"results":"38","hashOfConfig":"33"},{"size":3468,"mtime":1685228765466,"results":"39","hashOfConfig":"33"},{"size":1064,"mtime":1683578818946,"results":"40","hashOfConfig":"33"},{"size":600,"mtime":1683831961178,"results":"41","hashOfConfig":"33"},{"size":3605,"mtime":1684607079801,"results":"42","hashOfConfig":"33"},{"size":1162,"mtime":1683579047910,"results":"43","hashOfConfig":"33"},{"size":811,"mtime":1684518978613,"results":"44","hashOfConfig":"33"},{"size":1901,"mtime":1684606936888,"results":"45","hashOfConfig":"33"},{"size":3693,"mtime":1685386110510,"results":"46","hashOfConfig":"33"},{"size":6538,"mtime":1685228973440,"results":"47","hashOfConfig":"33"},{"size":1078,"mtime":1683311899901,"results":"48","hashOfConfig":"33"},{"size":1108,"mtime":1685229102766,"results":"49","hashOfConfig":"33"},{"size":738,"mtime":1684433239561,"results":"50","hashOfConfig":"33"},{"size":640,"mtime":1685385751071,"results":"51","hashOfConfig":"33"},{"size":143,"mtime":1684432612638,"results":"52","hashOfConfig":"33"},{"size":2771,"mtime":1683831069158,"results":"53","hashOfConfig":"33"},{"size":727,"mtime":1683745627869,"results":"54","hashOfConfig":"33"},{"size":551,"mtime":1684427438126,"results":"55","hashOfConfig":"33"},{"size":248,"mtime":1685049244708,"results":"56","hashOfConfig":"33"},{"size":200,"mtime":1684418988630,"results":"57","hashOfConfig":"33"},{"size":4095,"mtime":1684869426234,"results":"58","hashOfConfig":"33"},{"size":4180,"mtime":1685394671137,"results":"59","hashOfConfig":"33"},{"size":3043,"mtime":1685060418312,"results":"60","hashOfConfig":"33"},{"size":2572,"mtime":1685132770271,"results":"61","hashOfConfig":"33"},{"size":593,"mtime":1684792561727,"results":"62","hashOfConfig":"33"},{"size":1373,"mtime":1685055226720,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},"jv93t6",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"68"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"68"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\index.js",["179"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './container/App';\n\nimport reportWebVitals from './reportWebVitals';\nimport \"./bootstrap-override.scss\";\nimport \"./i18n\"\n//import AuthenticationContext from './shared/AuthenticationContext';\nimport { Provider } from 'react-redux';\nimport { act } from 'react-dom/test-utils';\nimport configureStore from './redux/configureStore';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst store = configureStore();\n\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserSignupPage.js",["180","181","182","183","184","185"],[],"import React, { useState } from \"react\";\r\nimport {signup, changeLanguage, login} from \"../api/apiCalls\"\r\nimport Input from \"../components/input\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport { withApiProgress } from \"../shared/ApiProgress\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginSuccess } from \"../redux/authActions\";\r\n\r\nconst UserSignupPage = (props) => {\r\n\r\n    //each class component must override render\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const [form, setForm] = useState({\r\n        username: null,\r\n        displayName: null,\r\n        password: null,\r\n        confirmPassword: null\r\n    });\r\n    \r\n    const [errors, setErrors] = useState({});\r\n\r\n\r\n    const onChange = (event) =>{\r\n\r\n        const {name, value} = event.target\r\n        //const name = event.target.name;\r\n        //const value = event.target.value;\r\n        const errorsCopy = {...errors}; // copy errors\r\n        errorsCopy[name] = undefined;\r\n\r\n        if(name == \"password\" || name == \"confirmPassword\"){\r\n            if(name == \"password\" && value !== form.confirmPassword){\r\n                errorsCopy.confirmPassword = t(\"Passwords do not match\")\r\n            }\r\n            else if(name == \"confirmPassword\" && value !== form.password){\r\n                errorsCopy.confirmPassword = t(\"Passwords do not match\")\r\n            }else{\r\n                errorsCopy.confirmPassword = undefined;\r\n            }\r\n        }\r\n        setErrors(errorsCopy);\r\n        \r\n        const formCopy = {...form};\r\n        formCopy[name] = value;\r\n\r\n        setForm(formCopy);\r\n    };\r\n\r\n\r\n    const onClickSignup = async event =>{\r\n        event.preventDefault()\r\n        \r\n        const body = {\r\n            \"username\": form.username,\r\n            \"displayName\": form.displayName,\r\n            \"password\": form.password\r\n        }\r\n\r\n        try {\r\n            const response = await signup(body)\r\n\r\n            const creds = {\r\n                username: body.username,\r\n                password: body.password\r\n            }\r\n\r\n            const loginResponse = await login(creds);\r\n\r\n            const authState = {\r\n                username: loginResponse.data.user.username,\r\n                displayName: loginResponse.data.user.displayName,\r\n                image: loginResponse.data.user.image,\r\n                password: body.password,\r\n                token: loginResponse.data.token\r\n            }\r\n\r\n            dispatch(loginSuccess(authState))\r\n\r\n            props.history.push(\"/\")\r\n            \r\n        } catch (error) {\r\n            if(error.response.data.validationErrors != null){\r\n                setErrors(error.response.data.validationErrors)\r\n            }\r\n            console.log(error.response.data.validationErrors)            \r\n        }\r\n        \r\n        \r\n\r\n    };\r\n\r\n    const {t} = useTranslation();\r\n    const {pendingApiCall} = props;\r\n    return(\r\n        <div className=\"container\">\r\n            <form> \r\n                <h1 className=\"text-center\">{t(\"Sign up\")}</h1>\r\n                <Input type=\"text\" name=\"username\" label={t(\"Username\")} error ={errors.username} onChange={onChange} />\r\n                <Input type=\"text\" name=\"displayName\" label={t(\"Display Name\")} error ={errors.displayName} onChange={onChange} />\r\n                <Input type=\"password\" name=\"password\" label={t(\"Password\")} error ={errors.password} onChange={onChange} />\r\n                <Input type=\"password\" name=\"confirmPassword\" label={t(\"Confirm Password\")} error ={errors.confirmPassword} onChange={onChange} />\r\n                \r\n                {/*\r\n                <div className=\"form-group\">\r\n                    <label>Username</label>\r\n                    <input type=\"text\" className={errors.username == null ? \"form-control\" : \"form-control is-invalid\"} name=\"username\" onChange={this.onChange}/>\r\n                    <div className=\"invalid-feedback\">\r\n                        {errors.username}\r\n                    </div>\r\n                </div>\r\n                */}\r\n                <ButtonWithProgress buttonText={t(\"Sign up\")} pendingApiCall={pendingApiCall} onClickMethod={onClickSignup} disabledStatement={pendingApiCall || errors.confirmPassword !== undefined}/>\r\n                \r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst UserSignupPageWithApiProgress = withApiProgress(UserSignupPage,\"post\",\"/api/1.0/users\")\r\n\r\nexport default UserSignupPageWithApiProgress;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\api\\apiCalls.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\input.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\i18n.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserLoginPage.js",["186"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../components/input\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { login, setAuthorizationHeader } from \"../api/apiCalls\";\r\nimport ButtonWithProgress from \"../components/ButtonWithProgress\";\r\nimport { withApiProgress } from \"../shared/ApiProgress\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginSuccess } from \"../redux/authActions\";\r\n//import { Authentication } from \"../shared/AuthenticationContext\";\r\n\r\n\r\nconst UserLoginPage = (props) => {\r\n\r\n    const [username, setUsername] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [error,  setError] = useState();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // a hook function that will be executed if any effects occurs on the spesificed fields\r\n    useEffect(() => {\r\n        setError(undefined)\r\n    }, [username, password])\r\n\r\n    const onClickLogin = async event =>{\r\n\r\n        setError(undefined)\r\n\r\n        event.preventDefault();\r\n\r\n        const creds = {\r\n            username: username,\r\n            password: password\r\n        }\r\n\r\n        try {\r\n            const response = await login(creds);\r\n            props.history.push(\"/\");\r\n\r\n            const authState = {\r\n                username: response.data.user.username,\r\n                displayName: response.data.user.displayName,\r\n                image: response.data.user.image,\r\n                password: password,\r\n                token: response.data.token\r\n            }\r\n            \r\n            dispatch(loginSuccess(authState))\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    \r\n    const {t} = useTranslation();\r\n    const {pendingApiCall } = props\r\n    return(\r\n        <div className=\"container\">\r\n            <form>\r\n                <h1 className=\"text-center\">{t(\"Login\")}</h1>\r\n                <Input type=\"text\" name=\"username\" label={t(\"Username\")} onChange={(event) => {setUsername(event.target.value)}} />\r\n                <Input type=\"password\" name=\"password\" label={t(\"Password\")} onChange={(event) => {setPassword(event.target.value)}}/>\r\n                \r\n                {/*  ? excepts : but && doesn't except any else conditions\r\n                \r\n                    i could also use &&. In that case if this.state.error existed, it would\r\n                    write the message but else it wouldn't render anything\r\n                \r\n                */}\r\n\r\n                {error ? \r\n                <div className=\"alert alert-danger mt-3\">\r\n                {error}\r\n                </div>\r\n                :\r\n                <div></div>\r\n                }\r\n{/*                     <button className=\"btn btn-primary\" disabled={!username || !password || pendingApiCall} onClick={this.onClickLogin}>\r\n                    {pendingApiCall &&\r\n                    <span className=\"spinner-border spinner-border-sm\"></span>                    \r\n                    }\r\n                    {t(\"Login\")}\r\n                </button>*/}        \r\n\r\n                <ButtonWithProgress buttonText={t(\"Login\")} onClickMethod={onClickLogin} pendingApiCall={pendingApiCall} disabledStatement={!username || !password || pendingApiCall} />\r\n                        \r\n                </form>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nconst LoginPageWithApiProgress = withApiProgress(UserLoginPage,\"post\",\"/api/1.0/auth\");\r\n\r\nexport default LoginPageWithApiProgress;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\LanguageSelector.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ButtonWithProgress.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\shared\\ApiProgress.js",["187"],[],"import React, { Component, useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const useApiProgress = (apiMethod, apiPath, strictPath = false) => {\r\n    const [pendingApiCall, setPendingAPiCall] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let requestInterceptor,responseInterceptor = undefined;\r\n        const registerInterceptors = () => {\r\n            requestInterceptor = axios.interceptors.request.use((request) => {\r\n\r\n                if(strictPath && apiPath === request.url && request.method === apiMethod){\r\n                    setPendingAPiCall(true);\r\n                }\r\n                else if(!strictPath && request.url.startsWith(apiPath) && request.method === apiMethod){\r\n                    setPendingAPiCall(true);\r\n                }\r\n                return request;\r\n            })\r\n    \r\n            responseInterceptor = axios.interceptors.response.use((response) => {\r\n                if(response.config.url.startsWith(apiPath) && response.config.method === apiMethod){\r\n                    setPendingAPiCall(false);\r\n\r\n                }\r\n                return response;\r\n            }, (error) => {\r\n    \r\n                if(error.config.url.startsWith(apiPath)){\r\n                    setPendingAPiCall(false);\r\n\r\n                }\r\n                throw error;\r\n            })\r\n        }\r\n\r\n        registerInterceptors();\r\n\r\n        \r\n        const unregisterInterceptors = () => {\r\n            axios.interceptors.request.eject(requestInterceptor);\r\n            axios.interceptors.response.eject(responseInterceptor);\r\n            \r\n        }\r\n\r\n        return function unmount() {\r\n            unregisterInterceptors();\r\n        }\r\n    },[apiPath, apiMethod])\r\n\r\n    return pendingApiCall;\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent,apiMethod,apiPath){\r\n    return class extends Component {\r\n  \r\n        state = {\r\n            pendingApiCall: false\r\n        }\r\n      \r\n        registerInterceptors = () => {\r\n            this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n                if(request.url.startsWith(apiPath) && request.method === apiMethod){\r\n                    this.setState({\r\n                        pendingApiCall: true\r\n                    })\r\n                }\r\n                return request;\r\n            })\r\n    \r\n            this.responseInterceptor = axios.interceptors.response.use((response) => {\r\n                if(response.config.url.startsWith(apiPath) && response.config.method === apiMethod){\r\n                    this.setState({\r\n                        pendingApiCall: false\r\n                    })\r\n                }\r\n                return response;\r\n            }, (error) => {\r\n    \r\n                if(error.config.url.startsWith(apiPath)){\r\n                    this.setState({\r\n                        pendingApiCall: false\r\n                    })\r\n                }\r\n                throw error;\r\n            })\r\n        }\r\n\r\n        unregisterInterceptors = () => {\r\n            axios.interceptors.request.eject(this.requestInterceptor);\r\n            axios.interceptors.response.eject(this.responseInterceptor);\r\n            \r\n        }\r\n\r\n        componentDidMount(){\r\n            this.registerInterceptors();\r\n        }\r\n    \r\n        componentWillUnmount(){\r\n            this.unregisterInterceptors();\r\n        }\r\n\r\n        render() {\r\n        //return <div>{React.cloneElement(this.props.children, {pendingApiCall: this.state.pendingApiCall})}</div>\r\n        return <WrappedComponent pendingApiCall={this.state.pendingApiCall} {...this.props} />\r\n    }\r\n    } \r\n}\r\n\r\n","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\container\\App.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\HomePage.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\pages\\UserPage.js",["188","189"],[],"import React, { useEffect, useState } from 'react';\r\nimport ProfileCard from '../components/ProfileCard';\r\nimport { getUser } from '../api/apiCalls';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useApiProgress, withApiProgress } from '../shared/ApiProgress';\r\nimport Spinner from '../components/Spinner';\r\nimport HoaxFeedForProfile from '../components/HoaxFeedForProfile';\r\n\r\nconst UserPage = (props) => {\r\n\r\n    const[user, setUser] = useState({});\r\n    const[notFound, setNotFound] = useState(false);\r\n\r\n    const {username} = props.match.params;\r\n    const {t} = useTranslation();\r\n    const pendingApiCall = useApiProgress(\"get\",`/api/1.0/users/${username}`,true);\r\n\r\n    const loadUser = async () => {\r\n        setNotFound(false);\r\n        try {\r\n            const response = await getUser(username);\r\n            setUser(response.data)\r\n            \r\n        } catch (error) {\r\n            setNotFound(true)            \r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        loadUser();\r\n    }, [username])\r\n\r\n    if(pendingApiCall){\r\n        return <Spinner />\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            {notFound ? \r\n            <div class=\"rounded p-3 mb-2 bg-danger text-white text-center\"\r\n            style={{opacity: 0.8}}\r\n            >\r\n                <div>\r\n                    <span class=\"material-symbols-outlined\" style={{fontSize: 32}}>\r\n                    error\r\n                    </span>\r\n                </div>\r\n            {t(\"User not found\")}\r\n            </div>\r\n            : \r\n            <div className='row'> \r\n                <div className='col'>\r\n                    <ProfileCard user={user}/>\r\n                </div>\r\n                <div className='col'>\r\n                    <HoaxFeedForProfile />\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default UserPage;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\TopBar.js",["190","191","192"],[],"import logo from \"../assets/hoaxify.png\";\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport { useTranslation} from 'react-i18next';\r\n//import { Authentication } from '../shared/AuthenticationContext';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logoutSuccess } from '../redux/authActions';\r\nimport { clearAuthorizationHeader, logout } from \"../api/apiCalls\";\r\nimport DropdownMenu from \"./DropdownMenu\";\r\nimport ProfileImageWithDefault from \"./ProfileImageWithDefault\";\r\nimport { useState } from \"react\";\r\n\r\nconst TopBar = (props) => {\r\n\r\n    const [menuVisible,setMenuVisible] = useState(false);\r\n    const {t} = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const { isLoggedIn, username, displayName, image, token} = useSelector((store) => {\r\n        return {\r\n            isLoggedIn: store.isLoggedIn,\r\n            username: store.username,\r\n            displayName: store.displayName,\r\n            image: store.image,\r\n            token: store.token\r\n        };\r\n    });\r\n\r\n    const onClickLogout = () => {\r\n        try {\r\n            dispatch(logoutSuccess())\r\n            setMenuVisible(false)   \r\n            logout(token);\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    const onClickMyProfile = () => {\r\n        setMenuVisible(false);\r\n    }\r\n    \r\n    //const cannot be reassigned once assigned\r\n    //we should use let\r\n    let links = (\r\n        <ul className='navbar-nav ms-auto'>\r\n        <li className='text-white'>\r\n            <Link className=\"nav-link\" to=\"/login\">\r\n            {t(\"Login\")}\r\n            </Link>\r\n        </li>\r\n        <li className='text-white'>\r\n            <Link className=\"nav-link me-5\" to=\"/signup\">\r\n            {t(\"Sign up\")}\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n    );\r\n\r\n    if (isLoggedIn) {\r\n        links = (\r\n        <ul className='navbar-nav ms-auto'>\r\n            <li className=\"nav-item dropdown\">\r\n                <div className=\"d-flex align-items-center\" style={{cursor: \"pointer\"}} onClick={() => {setMenuVisible(!menuVisible)}}>\r\n                    <ProfileImageWithDefault image={image} width=\"32\" height=\"32\" />\r\n                    <span className='nav-link text-white dropdown-toggle me-5'>{displayName}</span>\r\n                </div>\r\n                <div className={menuVisible ? \"dropdown-menu show shadow p-0\" : \"dropdown-menu shadow p-0\"}>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <span class=\"material-symbols-outlined\">\r\n                        person\r\n                        </span>\r\n                        <Link className=\"dropdown-item\" to={\"/user/\" + username} onClick={onClickMyProfile}>\r\n                        {t(\"My Profile\")}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <span class=\"material-symbols-outlined text-danger\">\r\n                        logout\r\n                        </span>\r\n                        <Link className=\"dropdown-item me-5\" to=\"/login\" onClick={onClickLogout}>\r\n                        {t(\"Logout\")}\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n            </li>\r\n        </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='bg-light mb-2'>\r\n            <nav className=\"navbar navbar-dark navbar-expand bg-primary shadow\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    <img src={logo} width=\"60\"/>\r\n                    Hoaxify\r\n                </Link>\r\n\r\n                {links}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TopBar;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ProfileCard.js",["193"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Input from './input';\r\nimport { clearAuthorizationHeader, deleteUser, updateUser } from '../api/apiCalls';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport ButtonWithProgress from './ButtonWithProgress';\r\nimport { logoutSuccess, updateSuccess } from '../redux/authActions';\r\nimport Modal from './Modal';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\n//import { Authentication } from '../shared/AuthenticationContext';\r\n\r\nconst ProfileCard = (props) => {\r\n\r\n    const [inEditMode,setInEditMode] = useState(false);\r\n    const [user,setUser] = useState({...props.user});\r\n    const [newImage,setNewImage] = useState();\r\n    const [errors,setErrors] = useState({});\r\n    const [visible,setVisible] = useState(false);\r\n\r\n    const {username, displayName, image} = user;\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [updatedDisplayName,setUpdatedDisplayName] = useState(displayName);\r\n\r\n\r\n    const routeParams = useParams();\r\n    const {t} = useTranslation();\r\n    const pendingApiCall = useApiProgress(\"put\",`/api/1.0/users/${username}`)\r\n    const pendingApiCallForDeleting = useApiProgress(\"delete\",`/api/1.0/users/${username}`)\r\n\r\n    const {loggedInUsername} = useSelector((store) => {\r\n        return {\r\n            loggedInUsername: store.username\r\n        }\r\n    })\r\n\r\n    const pathUsername = routeParams.username;\r\n\r\n    const editable = pathUsername === loggedInUsername;\r\n\r\n    useEffect(() => {setErrors({})}, [updatedDisplayName,newImage])\r\n\r\n\r\n    const onClickSave = async () => {\r\n\r\n        let image;\r\n        if (newImage){\r\n            image = newImage.split(\",\")[1];\r\n        }\r\n\r\n        const body = {\r\n            displayName: updatedDisplayName,\r\n            image: image\r\n        };\r\n\r\n        try {\r\n            const response = await updateUser(username,body);\r\n            console.log(response);\r\n            setUser(response.data);\r\n            setInEditMode(false);\r\n\r\n            dispatch(updateSuccess(response.data));\r\n        } catch (error) {\r\n            console.log(error)\r\n            setErrors(error.response.data.validationErrors)\r\n        }\r\n    \r\n    }\r\n\r\n    const onClickCancel = () => {\r\n        setInEditMode(false);\r\n        setUpdatedDisplayName(displayName);\r\n        setNewImage(undefined);\r\n    }\r\n\r\n\r\n    const onChangeFile = (event) => {\r\n        if(event.target.files.length < 1){\r\n            return;\r\n        }\r\n        const file = event.target.files[0];\r\n        const fileReader = new FileReader();\r\n        fileReader.onloadend = () => {\r\n            setNewImage(fileReader.result);\r\n        }\r\n        fileReader.readAsDataURL(file);\r\n    }\r\n\r\n    const onClickDeleteModal = async () => {\r\n        await deleteUser(pathUsername);\r\n        setVisible(false);\r\n        dispatch(logoutSuccess());\r\n        history.push(\"/\")\r\n    }\r\n\r\n    return (\r\n        <div class=\"card\">\r\n            <div className='card-header text-center'>\r\n                <ProfileImageWithDefault image={image} tempImage={newImage} width=\"256\" \r\n                />\r\n            </div>\r\n            <div class=\"card-body text-center\">\r\n                {!inEditMode &&\r\n                <>\r\n                <h5 class=\"card-title\">{displayName}@{username}</h5>\r\n                \r\n                {editable &&\r\n                <>\r\n                <div className='d-flex flex-column align-items-center'>\r\n                    <button className='btn btn-success' onClick={() => setInEditMode(true)}>\r\n                        <span class=\"material-symbols-outlined me-1 d-inline-flex\" style={{fontSize:16}}>\r\n                        edit\r\n                        </span>\r\n                        {t(\"Edit\")}\r\n                    </button>\r\n                </div>\r\n                <div class=\"d-flex flex-column align-items-center\">\r\n                <button class=\"btn btn-danger mt-2 d-flex align-items-center\" onClick={() => setVisible(true)}>\r\n                    <span class=\"material-symbols-outlined mr-1 me-1\">\r\n                    person_remove\r\n                    </span>\r\n                    {t(\"Delete my account\")}\r\n                </button>\r\n                </div>\r\n                <Modal title={t(\"Delete Account\")} visible={visible} pendingApiCall={pendingApiCallForDeleting} onClickCancel={() => setVisible(false)} onClickDelete={onClickDeleteModal} message={\r\n                    <div>\r\n                        <div className='row'>\r\n                            <strong>{t(\"Are you sure to delete your account?\")}</strong>\r\n                        </div>\r\n                    </div>\r\n                }/>\r\n                </>\r\n               }\r\n                </>                \r\n                }\r\n                \r\n                {inEditMode &&\r\n                <div>\r\n                    <Input label={t(\"Edit Display Name\")} name=\"edit\" type=\"text\" error={errors.displayName} defaultValue={displayName} onChange={(event) => setUpdatedDisplayName(event.target.value)}/>\r\n                    \r\n                    <div class=\"mb-3\">\r\n                    <label for=\"formFile\" class=\"form-label\">{t(\"Choose Profile Picture\")}</label>\r\n                    <Input type=\"file\" onChange={onChangeFile} error={errors.image}/>\r\n                    </div>\r\n\r\n                    {/* Save Button */}\r\n                    <ButtonWithProgress className='btn btn-success d-inline-flex mt-2' onClickMethod={onClickSave} pendingApiCall={pendingApiCall} disabledStatement={pendingApiCall}\r\n                    buttonText={\r\n                        <>\r\n                        <span class=\"material-symbols-outlined\">save</span>                   \r\n                        {t(\"Save\")}\r\n                        </>\r\n                    }\r\n                    \r\n                    />\r\n\r\n                    {/* Cancel Button */}\r\n                    <button className='btn btn-danger d-inline-flex mt-2 ms-1' onClick={onClickCancel}>\r\n                    <span class=\"material-symbols-outlined\">cancel</span>\r\n                        {t\r\n                        (\"Cancel\")}\r\n                    </button>\r\n                </div>\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ProfileCard;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\shared\\AuthenticationContext.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\configureStore.js",["194"],[],"import { legacy_createStore as createStore } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport SecureLS from 'secure-ls';\r\nimport { setAuthorizationHeader } from '../api/apiCalls';\r\n\r\nconst secureLS = new SecureLS();\r\n\r\nconst getStateFromStorage = () => {\r\n\r\n  const localAuthData = secureLS.get(\"auth\");\r\n\r\n  let stateInLocalStorage = {\r\n    isLoggedIn: false,\r\n    username: undefined,\r\n    displayName: undefined,\r\n    image: undefined,\r\n    password: undefined\r\n  }\r\n\r\n  if(localAuthData){\r\n    return localAuthData;\r\n  }\r\n}\r\n\r\nconst updateStateInStorage = (newState) => {\r\n\r\n  secureLS.set(\"auth\",newState);\r\n\r\n}\r\n  \r\nconst configureStore = () => {\r\n\r\n  const stateInLocalStorage = getStateFromStorage();\r\n\r\n  const store = createStore(authReducer, stateInLocalStorage,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());  \r\n\r\n  // each time the state changes, this method will run\r\n  store.subscribe(() => {\r\n    updateStateInStorage(store.getState());\r\n    setAuthorizationHeader(store.getState());\r\n  })\r\n\r\n  return store; \r\n}\r\n\r\nexport default configureStore;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\authReducer.js",[],[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\authActions.js",["195","196"],[],"import { login, logout } from \"../api/apiCalls\";\r\nimport * as ACTIONS from \"../redux/Constants\" \r\n\r\nexport const logoutSuccess = () => {\r\n    const action = {\r\n        type: ACTIONS.LOGOUT_SUCCESS\r\n    };\r\n    return action;\r\n}\r\n\r\nexport const loginSuccess = (authState) => {\r\n    const action = {\r\n        type: ACTIONS.LOGIN_SUCCESS,\r\n        data: authState\r\n    }\r\n\r\n    return action;\r\n}\r\n\r\nexport const updateSuccess = ({displayName, image}) => {\r\n    const action = {\r\n        type: ACTIONS.UPDATE_SUCCESS,\r\n        data: {\r\n            displayName: displayName,\r\n            image: image\r\n        }\r\n    }\r\n\r\n    return action;\r\n}\r\n","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\redux\\Constants.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\UserList.js",["197"],[],"import React, { useEffect, useState } from 'react'\r\nimport { getUsers } from '../api/apiCalls'\r\nimport { useTranslation } from 'react-i18next'\r\nimport UserListItem from './UserListItem'\r\nimport { withApiProgress } from '../shared/ApiProgress'\r\nimport Spinner from './Spinner'\r\n\r\nconst UserList=(props) => {\r\n\r\n    const {t} = useTranslation();\r\n    const [page, setPage] = useState({\r\n        content: [],\r\n        size: 3,\r\n        number: 0,\r\n        totalPages: 0\r\n    });\r\n\r\n    const [loadFailure,setLoadFailure] = useState(false);\r\n\r\n    const loadUsers = async (pageNumber) => {\r\n        setLoadFailure(false);\r\n        try {\r\n            const response = await getUsers(pageNumber);\r\n            setPage(response.data)\r\n        } catch (error) {\r\n            setLoadFailure(true);\r\n        }\r\n    }\r\n\r\n    // if you give an empty error, it will act like componentdidmount\r\n    useEffect(() => {\r\n        loadUsers();\r\n    }, [])\r\n\r\n    const onClickNext = () => {\r\n        const nextPage = page.number + 1;\r\n        loadUsers(nextPage);\r\n    }\r\n\r\n    const onClickPrevious = () => {\r\n        const previousPage = page.number - 1;\r\n        loadUsers(previousPage);\r\n    }\r\n    \r\n    const onClickRaquo = () => {\r\n        const lastPage = page.totalPages - 1;\r\n        loadUsers(lastPage)\r\n    }\r\n\r\n    const onClickLaquo = () => {\r\n        const firstPage = 0;\r\n        loadUsers(0);\r\n    }\r\n\r\n    const {content: users, last, first} = page;\r\n    const {pendingApiCall} = props\r\n    return (\r\n    <div>\r\n        <div className='card'>\r\n            <h3 className='card-header text-center'>{t(\"Users\")}</h3>\r\n            {!pendingApiCall ?\r\n            <ul className=\"list-group\">\r\n            {users.map((user,index) => {\r\n                return (\r\n                    <UserListItem key={user.username} user={user} />\r\n                )\r\n            })}\r\n            </ul> \r\n            :\r\n            <Spinner />\r\n            }\r\n\r\n            {loadFailure && <div className='text-center text-danger'> {t(\"Failure\")} </div>}\r\n\r\n            <div>\r\n                <button type='button' className='btn btn-light float-end' onClick={onClickRaquo} disabled={last || pendingApiCall}>&raquo;</button>\r\n                <button type='button' className='btn btn-light float-end' onClick={onClickNext} disabled={last || pendingApiCall}>{t(\"Next\")}</button>\r\n                <button type='button' className='btn btn-light' onClick={onClickLaquo} disabled={first || pendingApiCall} >&laquo;</button>\r\n                <button type='button' className='btn btn-light' onClick={onClickPrevious} disabled={first || pendingApiCall}>{t(\"Previous\")}</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default withApiProgress(UserList, \"get\",\"/api/1.0/users\");","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\UserListItem.js",["198"],[],"import React from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\r\nconst UserListItem = (props) => {\r\n    const {user} = props;\r\n    const {username,displayName,image} = user\r\n\r\n    const {pendingApiCall} = props;\r\n    return (\r\n        <div>\r\n            <li class=\"list-group-item list-group-item-action\">\r\n                <Link className=\"nav-link\" to={\"/user/\" + username}>\r\n                <ProfileImageWithDefault image={image} width=\"25\" />\r\n                <span className='ms-2'>\r\n                {displayName}@{username}\r\n                </span>\r\n                </Link>\r\n            </li>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserListItem;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\ProfileImageWithDefault.js",["199"],[],"import React from 'react';\r\nimport defaultProfileLogo from \"../assets/profile.png\"\r\n\r\n\r\nconst ProfileImageWithDefault = (props) => {\r\n    \r\n    const {image, width, tempImage, height} = props\r\n\r\n    let imageSource = defaultProfileLogo;\r\n\r\n    if(image){\r\n        imageSource = \"/images/\" + image;\r\n    }\r\n    \r\n    return (\r\n        <img className='rounded-circle shadow' src={tempImage || imageSource} width={width} height={height} onError={(event) => {event.target.src=defaultProfileLogo}}/>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileImageWithDefault;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\Spinner.js",[],[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\DropdownMenu.js",["200"],[],"import React from 'react';\r\n\r\nconst DropdownMenu = (props) => {\r\n\r\n    const {title} = props;\r\n\r\n    return (\r\n\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DropdownMenu;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxifySection.js",["201"],[],"import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\r\nimport { postHoax, postHoaxAttachment } from '../api/apiCalls';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport ButtonWithProgress from './ButtonWithProgress';\r\nimport Input from './input';\r\nimport AutoImageUpload from './AutoImageUpload';\r\n\r\nconst HoaxifySection = (props) => {\r\n\r\n    const {image} = useSelector((store) => {\r\n        return {\r\n            image: store.image\r\n        }\r\n    })\r\n\r\n    const pendingApiCall = useApiProgress(\"post\",\"/api/1.0/hoaxes\");\r\n    const pendingApiCallForImage = useApiProgress(\"post\",\"/api/1.0/hoax-attachments\",true);\r\n    \r\n    const [showButtons,setShowButtons] = useState(false);\r\n    const [hoax,setHoax] = useState(\"\");\r\n    const [errors,setErrors] = useState({});\r\n    const [newImage, setNewImage] = useState();\r\n    const [attachmentId,setAttachmentId] = useState();\r\n\r\n    const onClickTextArea = () => {\r\n        setShowButtons(true);\r\n    }\r\n\r\n    const onChangeTextArea = (event) => {\r\n        setHoax(event.target.value)\r\n        setErrors({})\r\n    }\r\n\r\n    const onClickCancel = () => {\r\n        setHoax(\"\")\r\n        setShowButtons(false)\r\n        setNewImage(undefined)\r\n        setAttachmentId(undefined);\r\n    }\r\n\r\n    const onClickHoaxify = async () => {\r\n        const body = {\r\n            content: hoax,\r\n            attachmentId: attachmentId\r\n        };\r\n        try {\r\n            const response = await postHoax(body);\r\n            setHoax(\"\")\r\n            setNewImage(undefined)\r\n            setAttachmentId(undefined);\r\n            \r\n        } catch (error) {\r\n            setErrors(error.response.data.validationErrors);\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeFile = (event) => {\r\n        if(event.target.files.length < 1){\r\n            return;\r\n        }\r\n        const file = event.target.files[0];\r\n        const fileReader = new FileReader();\r\n        fileReader.onloadend = () => {\r\n            setNewImage(fileReader.result);\r\n        }\r\n        fileReader.readAsDataURL(file);\r\n\r\n        uploadFile(file);\r\n    }\r\n\r\n    const uploadFile = async (file) => {\r\n        const attachment = new FormData();\r\n        attachment.append('file',file);\r\n        const response = await postHoaxAttachment(attachment);\r\n        setAttachmentId(response.data.id);\r\n    }\r\n\r\n    return (\r\n        <div className='card'>\r\n            <div className='row'>\r\n                <div className='col-auto'>\r\n                <ProfileImageWithDefault image={image} width=\"32\" height=\"32\" />\r\n                </div>\r\n                <div className='col'>\r\n                    <form>\r\n                        <div class=\"form-group\">\r\n                            <textarea class={errors.content ? \"form-control mt-2 mb-2 is-invalid\" : \"form-control mt-2 mb-2\"} rows={showButtons ? \"5\" : \"2\"} onClick={onClickTextArea} onChange={onChangeTextArea} value={hoax}></textarea>\r\n                            <div className=\"invalid-feedback\">\r\n                            {errors.content}\r\n                            </div>\r\n                        </div>\r\n                        {showButtons &&\r\n                        <>\r\n                            <Input type=\"file\" onChange={onChangeFile} error={undefined}/>\r\n                            <AutoImageUpload image={newImage} pending={pendingApiCallForImage}/>\r\n                            <div className='mt-2 mb-2 text-end'>\r\n                                <ButtonWithProgress className='btn btn-primary' buttonText=\"Hoaxify\" onClickMethod={onClickHoaxify} pendingApiCall={pendingApiCall} disabledStatement={pendingApiCall || pendingApiCallForImage}/>\r\n                                <button disabled={pendingApiCall} className='btn btn-danger ms-1 me-2' onClick={onClickCancel}>Cancel</button>\r\n                            </div>\r\n                        </>\r\n                        }\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HoaxifySection;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxFeed.js",["202"],[],"import React, { useEffect, useState } from 'react';\r\nimport { getHoaxes, getNewHoaxesCount, getOldHoaxes } from '../api/apiCalls';\r\nimport HoaxListItem from './HoaxListItem';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport ButtonWithProgress from './ButtonWithProgress';\r\nimport Spinner from './Spinner';\r\n\r\nconst HoaxFeed = () => {\r\n\r\n    const [page,setPage] = useState({\r\n        content: [],\r\n        size: 5,\r\n        number: 0,\r\n        totalPages: 0,\r\n        last: false\r\n    });\r\n\r\n    const [newHoaxesCount, setNewHoaxesCount] = useState(0);\r\n\r\n    let contentFirstElementId = 0\r\n    if(page.content.length > 0){\r\n        contentFirstElementId = page.content[0].id\r\n    }\r\n\r\n    const {t} = useTranslation();\r\n    const pendingApiCall = useApiProgress(\"get\",`/api/1.0/hoaxes/${contentFirstElementId}`);\r\n    const pendingApiCallForNewHoaxes = useApiProgress(\"get\",`/api/1.0/hoaxes?page`);\r\n\r\n    useEffect(() => {\r\n        loadHoaxes();\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        let getCountLoop = setInterval(() => {\r\n            getCount()\r\n        }, 5000);\r\n\r\n        return () => {\r\n            clearInterval(getCountLoop)\r\n        }\r\n    },[contentFirstElementId])\r\n\r\n    const getCount = async () => {\r\n\r\n        try {\r\n            const response = await getNewHoaxesCount(contentFirstElementId);\r\n            setNewHoaxesCount(response.data.count);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    const loadHoaxes = async (sizeNumber) => {\r\n        \r\n        try {\r\n            const response = await getHoaxes(undefined,0,sizeNumber);\r\n            setPage(response.data);    \r\n        } catch (error) {\r\n            \r\n        }    \r\n    }\r\n\r\n    const loadOldHoaxes = async (sizeNumber = 5) => {\r\n        \r\n        try {\r\n            const response = await getOldHoaxes(contentFirstElementId,page.number,sizeNumber)\r\n            setPage(response.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const onClickLoadOldHoaxes = () => {\r\n        getCount();\r\n        const nextHoaxes = page.size + 5;\r\n        //loadHoaxes(nextHoaxes);\r\n        loadOldHoaxes(nextHoaxes);\r\n    }\r\n\r\n    const onClickNewHoaxes = async () => {\r\n        const sizeNumber = page.size + newHoaxesCount;\r\n        await loadHoaxes(sizeNumber);\r\n        setNewHoaxesCount(0);\r\n\r\n    }\r\n\r\n    const {content: hoaxes, last} = page;\r\n\r\n    if(hoaxes.length === 0 && newHoaxesCount === 0){\r\n        return(\r\n            <div className='text-center mt-4'>\r\n                <span className='alert alert-secondary'>{t(\"There are no hoaxes\")}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onDeleteSuccess = () => {\r\n        loadHoaxes(page.size - 1);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            {newHoaxesCount > 0 && \r\n            <div className='alert alert-secondary text-center mt-3' onClick={onClickNewHoaxes} style={{cursor: 'pointer'}}>\r\n                \r\n                {pendingApiCallForNewHoaxes ? <Spinner/> :\r\n                (\r\n                    <>\r\n                    {t(\"There are some new hoaxes\")}\r\n                    <span class=\"ms-2 badge text-bg-secondary bg-danger\">  {newHoaxesCount <= 9 ? newHoaxesCount : '9+'}</span>\r\n                    </>\r\n                )}\r\n            </div>\r\n            }\r\n            {hoaxes.map((value,index) => {\r\n                const {content: hoaxContent, timeStamp, fileAttachment ,user, id} = value;\r\n                return (\r\n                    <div>\r\n                        <HoaxListItem key={index} content={hoaxContent} timeStamp={timeStamp} user={user} fileAttachment={fileAttachment} hoaxId={id} onDeleteSuccess={onDeleteSuccess} />\r\n                    </div>\r\n                )\r\n            })}\r\n            <div className='text-center mt-2'>\r\n                <ButtonWithProgress buttonText={t(\"Load Old Hoaxes\")} className='btn btn-primary' onClickMethod={onClickLoadOldHoaxes} pendingApiCall={pendingApiCall} disabledStatement={pendingApiCall || last} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HoaxFeed;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxListItem.js",["203"],[],"import React, { useState } from 'react';\r\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport { format } from 'timeago.js';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector } from 'react-redux';\r\nimport { deleteHoax } from '../api/apiCalls';\r\nimport Modal from './Modal';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\n\r\nconst HoaxListItem = (props) => {\r\n    \r\n    const loggedInUsername = useSelector((store) => {\r\n        return store.username;\r\n    })\r\n    const {content, timeStamp, user, fileAttachment,hoaxId, onDeleteSuccess} = props;\r\n    const {username,displayName,image} = user;\r\n    const {i18n, t} = useTranslation();\r\n\r\n    const pendingApiCall = useApiProgress(\"delete\",`/api/1.0/hoaxes/${hoaxId}`,true);\r\n\r\n    const [visible,setVisible] = useState(false);\r\n\r\n    const formattedTime = format(timeStamp,i18n.language);\r\n\r\n    const ownedByLoggedInUser = loggedInUsername === username;\r\n\r\n    const onClickDelete = () => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClickCancelModal = () => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const onClickDeleteModal = async () => {\r\n        await deleteHoax(hoaxId);\r\n        onDeleteSuccess();\r\n        setVisible(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className='card mt-3'>\r\n            <div className='row'>\r\n                <div className='col-auto'>\r\n                    <ProfileImageWithDefault image={image} width=\"32\" height=\"32\" />\r\n                    <span className='ms-2 fw-bold'>\r\n                        <Link className=\"text-dark text-decoration-none\" to={`/user/${username}`}>{displayName}@{username}</Link>\r\n                    </span>\r\n                    <span className='ms-2 fw-light'>\r\n                        {formattedTime}\r\n                    </span>\r\n                    {ownedByLoggedInUser &&\r\n                    <button className='btn btn-delete-link mt-1 ms-2' onClick={onClickDelete}>\r\n                        <span class=\"material-symbols-outlined\">delete</span>\r\n                    </button> \r\n                    }\r\n                </div>\r\n            </div>\r\n            <form>\r\n                <div class=\"form-group\">\r\n                    <textarea class=\"form-control mt-2 mb-2\" value={content}/>\r\n                </div>\r\n                {fileAttachment && <img className='img-thumbnail' src={\"/images/\" + fileAttachment.name}/> }\r\n            </form>\r\n        </div>\r\n        <Modal title={t(\"Delete hoax\")} visible={visible} onClickCancel={onClickCancelModal} onClickDelete={onClickDeleteModal} pendingApiCall={pendingApiCall} message={\r\n            <div>\r\n                <div className='row'>\r\n                    <strong>{t(\"Are you sure to delete the hoax?\")}</strong>\r\n                </div>\r\n                <div className='row'>\r\n                    <span>{content}</span>\r\n                </div>\r\n            </div>\r\n        }/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HoaxListItem;",[],"C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\HoaxFeedForProfile.js",["204"],[],"import React, { useEffect, useState } from 'react';\r\nimport { getHoaxes, getOldHoaxes } from '../api/apiCalls';\r\nimport HoaxListItem from './HoaxListItem';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport ButtonWithProgress from './ButtonWithProgress';\r\n\r\nconst HoaxFeedForProfile = () => {\r\n    const [page,setPage] = useState({\r\n        content: [],\r\n        size: 5,\r\n        number: 0,\r\n        totalPages: 0,\r\n        last: false\r\n    });\r\n\r\n    const {t} = useTranslation();\r\n    const {username} = useParams();\r\n    const pendingApiCall = useApiProgress(\"get\",`/api/1.0/users/${username}/hoaxes`)\r\n\r\n    useEffect(() => {\r\n        loadHoaxes();\r\n    },[]);\r\n\r\n    const loadHoaxes = async (sizeNumber) => {\r\n        \r\n        try {\r\n            const response = await getHoaxes(username,0,sizeNumber);\r\n            setPage(response.data);    \r\n        } catch (error) {\r\n            \r\n        }    \r\n    }\r\n\r\n    const onClickLoadOldHoaxes = async () => {\r\n        const contentFirstElementId = page.content[0].id;\r\n        const size = page.size + 5;\r\n         try {\r\n            const response = await getOldHoaxes(contentFirstElementId,0,size,username);\r\n            setPage(response.data);    \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    const {content: hoaxes, last} = page;\r\n\r\n    if(hoaxes.length === 0){\r\n        return(\r\n            <div className='text-center mt-4'>\r\n                <span className='alert alert-secondary'>{t(\"There are no hoaxes\")}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onDeleteSuccess = () => {\r\n        loadHoaxes(page.size - 1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {hoaxes.map((value,index) => {\r\n                const {content: hoaxContent, timeStamp, user, id, fileAttachment} = value;\r\n                return (\r\n                    <div>\r\n                        <HoaxListItem key={index} content={hoaxContent} fileAttachment={fileAttachment} timeStamp={timeStamp} user={user} hoaxId={id} onDeleteSuccess={onDeleteSuccess}/>\r\n                    </div>\r\n                )\r\n            })}\r\n            <div className='text-center mt-2'>\r\n                <ButtonWithProgress buttonText={t(\"Load Old Hoaxes\")} className='btn btn-primary' onClickMethod={onClickLoadOldHoaxes} pendingApiCall={pendingApiCall} disabledStatement={pendingApiCall || last} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HoaxFeedForProfile;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\AutoImageUpload.js",["205"],[],"import React from 'react';\r\nimport \"./AutoImageUploadCSS.css\";\r\n\r\nconst AutoImageUpload = (props) => {\r\n    const {image,pending} = props;\r\n    return (\r\n        <div className='myContainer'>\r\n            <img className='img-thumbnail' src={image}/>\r\n            <div className='overlay' style={pending ? {opacity: 1} : {opacity: 0}}>\r\n                <div class=\"text-white d-flex justify-content-center h-100\">\r\n                    <span class=\"spinner-border m-auto\" role=\"status\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AutoImageUpload;","C:\\Users\\90538\\Desktop\\spring-react-course\\frontend\\src\\components\\Modal.js",["206"],[],"import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Spinner from './Spinner';\r\nimport ButtonWithProgress from './ButtonWithProgress';\r\n\r\nconst Modal = (props) => {\r\n    const {visible, onClickCancel, message, onClickDelete, pendingApiCall, title} = props;\r\n    const {t} = useTranslation();\r\n    let className = \"modal fade\";\r\n\r\n    if(visible){\r\n        className = \"modal fade show d-block\"\r\n    }\r\n\r\n    return (\r\n        <div className={className} style={{backgroundColor: \"#0000007a\"}}>\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">{title}</h5>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {message}\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={onClickCancel}>{t(\"Close\")}</button>\r\n                        <ButtonWithProgress className=\"btn btn-danger\" onClickMethod={onClickDelete} pendingApiCall={pendingApiCall} buttonText={t(\"Delete\")} disabledStatement={pendingApiCall} /> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;",{"ruleId":"207","severity":1,"message":"208","line":11,"column":10,"nodeType":"209","messageId":"210","endLine":11,"endColumn":13},{"ruleId":"207","severity":1,"message":"211","line":2,"column":17,"nodeType":"209","messageId":"210","endLine":2,"endColumn":31},{"ruleId":"212","severity":1,"message":"213","line":34,"column":17,"nodeType":"214","messageId":"215","endLine":34,"endColumn":19},{"ruleId":"212","severity":1,"message":"213","line":34,"column":39,"nodeType":"214","messageId":"215","endLine":34,"endColumn":41},{"ruleId":"212","severity":1,"message":"213","line":35,"column":21,"nodeType":"214","messageId":"215","endLine":35,"endColumn":23},{"ruleId":"212","severity":1,"message":"213","line":38,"column":26,"nodeType":"214","messageId":"215","endLine":38,"endColumn":28},{"ruleId":"207","severity":1,"message":"216","line":63,"column":19,"nodeType":"209","messageId":"210","endLine":63,"endColumn":27},{"ruleId":"207","severity":1,"message":"217","line":4,"column":17,"nodeType":"209","messageId":"210","endLine":4,"endColumn":39},{"ruleId":"218","severity":1,"message":"219","line":49,"column":7,"nodeType":"220","endLine":49,"endColumn":27,"suggestions":"221"},{"ruleId":"207","severity":1,"message":"222","line":5,"column":26,"nodeType":"209","messageId":"210","endLine":5,"endColumn":41},{"ruleId":"218","severity":1,"message":"223","line":31,"column":8,"nodeType":"220","endLine":31,"endColumn":18,"suggestions":"224"},{"ruleId":"207","severity":1,"message":"225","line":7,"column":10,"nodeType":"209","messageId":"210","endLine":7,"endColumn":34},{"ruleId":"207","severity":1,"message":"226","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":94,"column":21,"nodeType":"229","endLine":94,"endColumn":49},{"ruleId":"207","severity":1,"message":"225","line":7,"column":10,"nodeType":"209","messageId":"210","endLine":7,"endColumn":34},{"ruleId":"207","severity":1,"message":"230","line":12,"column":7,"nodeType":"209","messageId":"210","endLine":12,"endColumn":26},{"ruleId":"207","severity":1,"message":"231","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":15},{"ruleId":"207","severity":1,"message":"232","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":23},{"ruleId":"207","severity":1,"message":"233","line":51,"column":15,"nodeType":"209","messageId":"210","endLine":51,"endColumn":24},{"ruleId":"207","severity":1,"message":"234","line":8,"column":12,"nodeType":"209","messageId":"210","endLine":8,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":16,"column":9,"nodeType":"229","endLine":16,"endColumn":169},{"ruleId":"207","severity":1,"message":"235","line":5,"column":12,"nodeType":"209","messageId":"210","endLine":5,"endColumn":17},{"ruleId":"207","severity":1,"message":"216","line":49,"column":19,"nodeType":"209","messageId":"210","endLine":49,"endColumn":27},{"ruleId":"218","severity":1,"message":"236","line":42,"column":7,"nodeType":"220","endLine":42,"endColumn":30,"suggestions":"237"},{"ruleId":"227","severity":1,"message":"228","line":65,"column":36,"nodeType":"229","endLine":65,"endColumn":107},{"ruleId":"218","severity":1,"message":"238","line":24,"column":7,"nodeType":"220","endLine":24,"endColumn":9,"suggestions":"239"},{"ruleId":"227","severity":1,"message":"228","line":8,"column":13,"nodeType":"229","endLine":8,"endColumn":57},{"ruleId":"207","severity":1,"message":"240","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},"no-unused-vars","'act' is defined but never used.","Identifier","unusedVar","'changeLanguage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'setAuthorizationHeader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'strictPath'. Either include it or remove the dependency array.","ArrayExpression",["241"],"'withApiProgress' is defined but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["242"],"'clearAuthorizationHeader' is defined but never used.","'DropdownMenu' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'stateInLocalStorage' is assigned a value but never used.","'login' is defined but never used.","'logout' is defined but never used.","'firstPage' is assigned a value but never used.","'pendingApiCall' is assigned a value but never used.","'title' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCount'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'loadHoaxes'. Either include it or remove the dependency array.",["244"],"'Spinner' is defined but never used.",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [apiPath, apiMethod, strictPath]",{"range":"253","text":"254"},"Update the dependencies array to be: [loadUser, username]",{"range":"255","text":"256"},"Update the dependencies array to be: [contentFirstElementId, getCount]",{"range":"257","text":"258"},"Update the dependencies array to be: [loadHoaxes]",{"range":"259","text":"260"},[1693,1713],"[apiPath, apiMethod, strictPath]",[1016,1026],"[loadUser, username]",[1226,1249],"[contentFirstElementId, getCount]",[796,798],"[loadHoaxes]"]